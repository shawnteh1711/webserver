/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   test.cpp                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: leng-chu <-chu@student.42kl.edu.my>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2023/03/27 12:37:00 by leng-chu          #+#    #+#             */
/*   Updated: 2023/03/27 14:31:35 by leng-chu         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>
#include <vector>
#include <cstring>
#include <cstdlib>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <poll.h>

using namespace std;

# define MAX_CLIENTS 5

int	main()
{
	int	server_fd1, server_fd2;
	struct sockaddr_in addr1, addr2;
	int addrlen = sizeof(addr1);

	// 2 sockets created
	if ((server_fd1 = socket(AF_INET, SOCK_STREAM, 0)) == 0)
	{
		perror("socket failed");
		exit(EXIT_FAILURE);
	}
	
	if ((server_fd2 = socket(AF_INET, SOCK_STREAM, 0)) == 0)
	{
		perror("socket failed");
		exit(EXIT_FAILURE);
	}

	// 2 sockets binding
	memset(&addr1, 0, sizeof(addr1));
	addr1.sin_family = AF_INET;
	addr1.sin_addr.s_addr = INADDR_ANY;
	addr1.sin_port = htons(8080);
	if (bind(server_fd1, (struct sockaddr*)&addr1, sizeof(addr1)) < 0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}
	
	memset(&addr2, 0, sizeof(addr1));
	addr2.sin_family = AF_INET;
	addr2.sin_addr.s_addr = INADDR_ANY;
	addr2.sin_port = htons(5000);
	if (bind(server_fd2, (struct sockaddr*)&addr2, sizeof(addr2)) < 0)
	{
		perror("bind failed");
		exit(EXIT_FAILURE);
	}

	// 2 listenings
	if (listen(server_fd1, MAX_CLIENTS) < 0)
	{
		perror("listen fd1 failed");
		exit(EXIT_FAILURE);
	}
	
	if (listen(server_fd2, MAX_CLIENTS) < 0)
	{
		perror("listen fd1 failed");
		exit(EXIT_FAILURE);
	}

	struct pollfd pollfds[2]; // store two socket fds for server 
	pollfds[0].fd = server_fd1;
	pollfds[0].events = POLLIN;
	pollfds[1].fd = server_fd2;
	pollfds[1].events = POLLIN;

	while (1) // need loop to handle mutli servers.
	{
		int ret = poll(pollfds, 2, -1);
		if (ret < 0)
		{
			perror("poll failed");
			exit(EXIT_FAILURE);
		}

		if (pollfds[0].revents & POLLIN)
		{
			cout << "enter server fd ONE" << endl;
			int	new_socket = accept(server_fd1, (struct sockaddr*)&addr1, (socklen_t*)&addrlen); // new_socket is actually new_client_fd.
			// here need to implement client fd's write, rev & need to add pollfd too.
			if (new_socket < 0)
			{
				perror("accept failed");
				exit(EXIT_FAILURE);
			}
			cout << "got connection to fd1!!" << endl;
			close(new_socket);
		}
		cout << "PASS BETWEEN" << endl;
		if (pollfds[1].revents & POLLIN)
		{
			cout << "enter server fd TWO" << endl;
			int	new_socket = accept(server_fd2, (struct sockaddr*)&addr2, (socklen_t*)&addrlen);
			
			if (new_socket < 0)
			{
				perror("accept failed");
				exit(EXIT_FAILURE);
			}
			cout << "got connection to fd2!!" << endl;
			close(new_socket);
		}
	}
	return (0);
}
